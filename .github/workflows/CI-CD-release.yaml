on:
   pull_request:
      types: [opened, synchronize, reopened]
      branches:
         - main
name: CI/CD Release
env:
   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
   GCP_REGION: ${{ secrets.GCP_REGION }}
   GCP_ARTIFACT_REPOSITORY: ${{ secrets.GCP_ARTIFACT_REPOSITORY }}
jobs:
   prepare:
      runs-on: ubuntu-latest
      outputs:
         branch: ${{ steps.check-branch.outputs.branch }}
      steps:
         - id: check-branch
           name: Check Branch
           uses: ./.github/actions/check-branch-name
           with:
              type: main

   unit-testing:
      runs-on: ubuntu-latest
      needs: [prepare]
      env:
         GCP_CLOUD_RUN_SERVICE: unit-jest-reports
      steps:
         - uses: actions/checkout@v2

         - name: Install Node
           uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - name: Configure Pnpm Cache
           uses: actions/cache@v2
           with:
              path: ~/.pnpm-store
              key: ${{ runner.os }}-node16-${{ hashFiles('**/package.json') }}
              restore-keys: ${{ runner.os }}-node16-

         - name: Install Pnpm and Dependencies
           uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Run Unit Testing
           run: pnpm test

         - name: Save Unit Testing Coverage Reports
           uses: actions/upload-artifact@v2
           with:
              name: unit-testing-report
              path: dist/tests/unit/reports

         - name: Save Unit Testing Coverage LCOV
           uses: actions/upload-artifact@v2
           with:
              name: unit-testing-report-lcov
              path: dist/tests/unit/reports/lcov.info

         - name: Setup Google Cloud Platform SDK
           uses: google-github-actions/setup-gcloud@master
           with:
              project_id: ${{ env.GCP_PROJECT_ID }}
              service_account_key: ${{ secrets.GCP_SA_KEY }}
              export_default_credentials: true

         - name: Authorize Docker Configuration for Artifact Registry
           run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

         - name: Build Release Container
           run: |
              docker build -f tools/images/unit-report/Dockerfile -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }} .

         - name: Push Release Container
           run: |
              docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }}

         - name: Deploy Release Container to Cloud Run
           id: deploy
           uses: google-github-actions/deploy-cloudrun@main
           with:
              service: ${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}
              image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }}
              region: ${{ env.GCP_REGION }}
              flags: --max-instances=2 --port=3000 --allow-unauthenticated --concurrency=20

         - name: Remove Deployed Release Container from Registry
           run: |
              gcloud artifacts docker images delete ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }}

         - name: Comment PR
           uses: actions/github-script@v5
           with:
              script: |
                 const body = `Unit Testing Deployment\n\n- Preview: ${{ steps.deploy.outputs.url }}`;

                 github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body,
                 })

   deploy:
      needs: [unit-testing]
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@v2

         - name: Install Node
           uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - name: Configure Pnpm Cache
           uses: actions/cache@v2
           with:
              path: ~/.pnpm-store
              key: ${{ runner.os }}-node16-${{ hashFiles('**/package.json') }}
              restore-keys: ${{ runner.os }}-node16-

         - name: Install Pnpm and Dependencies
           uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: false

         - name: Deploy Preview to Vercel
           id: vercel-deploy
           run: |
              pnpx vercel -t ${VERCEL_TOKEN} > preview-url.txt
           env:
              VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
              VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

         - name: Comment PR
           uses: actions/github-script@v5
           with:
              script: |
                 const path = require('path');
                 const fs = require('fs');

                 const resolve = (...args) => path.resolve(process.cwd(), ...args);

                 const filePath = resolve('preview-url.txt');
                 const fileContent = fs.readFileSync(filePath, 'utf8').trim();

                 const body = `Vercel Deployment\n\n- Preview: ${fileContent}`;

                 github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body,
                 })

         - name: Save Preview-Url
           uses: actions/upload-artifact@v2
           with:
              name: preview-url
              path: preview-url.txt

   e2e-testing:
      needs: [deploy, prepare]
      runs-on: ubuntu-latest
      env:
         GCP_CLOUD_RUN_SERVICE: e2e-playwright-reports
      steps:
         - uses: actions/checkout@v2

         - name: Install Node
           uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - name: Install Pnpm and Dependencies
           uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Install Playwright OS Dependncies
           run: pnpm e2e -- install-deps

         - name: Install Playwright OS Browsers
           run: pnpm e2e -- install

         - name: Download Preview-Url from Deploy
           uses: actions/download-artifact@v2
           with:
              name: preview-url

         - name: Run E2E Tests
           run: |
              PLAYWRIGHT_BASE_URL=$(cat preview-url.txt) pnpm e2e-ci

         - name: Save E2E Results
           uses: actions/upload-artifact@v2
           with:
              name: e2e-testing-report
              path: dist/tests/e2e/reports

         - name: Setup Google Cloud Platform SDK
           uses: google-github-actions/setup-gcloud@master
           with:
              project_id: ${{ env.GCP_PROJECT_ID }}
              service_account_key: ${{ secrets.GCP_SA_KEY }}
              export_default_credentials: true

         - name: Authorize Docker Configuration for Artifact Registry
           run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

         - name: Build Release Container
           run: |
              docker build -f tools/images/e2e-report/Dockerfile -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }} .

         - name: Push Release Container
           run: |
              docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }}

         - name: Deploy Release Container to Cloud Run
           id: deploy
           uses: google-github-actions/deploy-cloudrun@main
           with:
              service: ${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}
              image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }}
              region: ${{ env.GCP_REGION }}
              flags: --max-instances=2 --port=9323 --allow-unauthenticated --concurrency=20

         - name: Remove Deployed Release Container from Registry
           run: |
              gcloud artifacts docker images delete ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }}

         - name: Comment PR
           uses: actions/github-script@v5
           with:
              script: |
                 const body = `E2E Testing Deployment\n\n- Preview: ${{ steps.deploy.outputs.url }}\n- Preview Storybook: ${{ steps.deploy-storybook.outputs.url }}`;

                 github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body,
                 })

   storybook:
      needs: [e2e-testing]
      runs-on: ubuntu-latest
      env:
         GCP_CLOUD_RUN_SERVICE: storybook
      steps:
         - uses: actions/checkout@v2

         - name: Install Node
           uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - name: Install Pnpm and Dependencies
           uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Run Storybook Build
           run: |
              pnpm storybook:build

         - name: Setup Google Cloud Platform SDK
           uses: google-github-actions/setup-gcloud@master
           with:
              project_id: ${{ env.GCP_PROJECT_ID }}
              service_account_key: ${{ secrets.GCP_SA_KEY }}
              export_default_credentials: true

         - name: Authorize Docker Configuration for Artifact Registry
           run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

         - name: Build Release Container
           run: |
              docker build -f tools/images/storybook/Dockerfile -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}:${{ github.sha }} .