on:
   pull_request:
      types: [opened, synchronize, reopened]
      branches:
         - main
         - release/**
name: CI/CD
env:
   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
   GCP_REGION: ${{ secrets.GCP_REGION }}
   GCP_ARTIFACT_REPOSITORY: ${{ secrets.GCP_ARTIFACT_REPOSITORY }}
jobs:
   prepare:
      runs-on: ubuntu-latest
      outputs:
         branch: ${{ steps.clean-branch-name.outputs.result }}
      steps:
         - name: Print branch name
           run: echo "The branch name is ${{ github.event.pull_request.base.ref }}"
           
         - name: Check branch name
           uses: actions/github-script@v5
           with:
              result-encoding: string
              script: |
                 const branch = "${{ github.head_ref }}";
                 const matches = branch.match(/^((feature|bugfix|hotfix|experimental|merge)\/(issue-[0-9]+$)|release\/[0-9]\.[0-9]\.[0-9]$)$/g);

                 if (!matches) {
                     throw new Error("Invalid branch name")
                     process.exit(1)
                 }
 
         - id: clean-branch-name
           name: Clean branch name
           uses: actions/github-script@v5
           with:
              result-encoding: string
              script: |
                 const branch = "${{ github.head_ref }}";
                 
                 return branch.match(/release/) ? branch.replace(/\./g, "-").replace(/\//g, "-") : branch;

   lint:
      runs-on: ubuntu-latest
      needs: [prepare]
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - uses: actions/cache@v2
           with:
              path: ~/.pnpm-store
              key: ${{ runner.os }}-node16-${{ hashFiles('**/package.json') }}
              restore-keys: ${{ runner.os }}-node16-

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Build app
           run: pnpm build

         - name: Run lint
           run: pnpm lint -- --no-cache

   unit-testing:
      runs-on: ubuntu-latest
      needs: [lint, prepare]
      env:
         GCP_CLOUD_RUN_SERVICE: unit-jest-reports
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - uses: actions/cache@v2
           with:
              path: ~/.pnpm-store
              key: ${{ runner.os }}-node16-${{ hashFiles('**/package.json') }}
              restore-keys: ${{ runner.os }}-node16-

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Run tests
           run: pnpm test

         - name: Archive coverage results
           uses: actions/upload-artifact@v2
           with:
              name: unit-testing-report
              path: dist/tests/unit/reports

         - name: Archive coverage lcov file
           uses: actions/upload-artifact@v2
           with:
              name: unit-testing-report-lcov
              path: dist/tests/unit/reports/lcov.info

         - name: Setup GCP SDK
           uses: google-github-actions/setup-gcloud@master
           with:
              project_id: ${{ env.GCP_PROJECT_ID }}
              service_account_key: ${{ secrets.GCP_SA_KEY }}
              export_default_credentials: true

         - name: Authorize Docker push
           run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

         - name: Build Container
           run: |
              docker build -f .github/images/jest-report/Dockerfile -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }} .

         - name: Push Container
           run: |
              docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}

         - name: Deploy to Cloud Run
           if: ${{ github.head_ref == 'main' }}
           uses: google-github-actions/deploy-cloudrun@main
           with:
              service: ${{ env.GCP_CLOUD_RUN_SERVICE }}
              image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}
              region: ${{ env.GCP_REGION }}
              flags: --max-instances=2 --port=3000 --allow-unauthenticated --concurrency=20

         - name: Deploy to Cloud Run from release/**
           if: ${{ contains(github.head_ref, 'release') }}
           uses: google-github-actions/deploy-cloudrun@main
           with:
              service: ${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}
              image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}
              region: ${{ env.GCP_REGION }}
              flags: --max-instances=2 --port=3000 --allow-unauthenticated --concurrency=20

         - name: Remove Container from Registry
           run: |
              gcloud artifacts docker images delete ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}

   analysis:
      runs-on: ubuntu-latest
      needs: [unit-testing]
      steps:
         - uses: actions/checkout@v2
           with:
              fetch-depth: 0

         - name: Download coverage lcov file
           uses: actions/download-artifact@v2
           with:
              name: unit-testing-report-lcov

         - name: Print
           run: ls -la

         - name: Scan
           uses: SonarSource/sonarcloud-github-action@master
           env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

   deploy:
      needs: [analysis]
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - uses: actions/cache@v2
           with:
              path: ~/.pnpm-store
              key: ${{ runner.os }}-node16-${{ hashFiles('**/package.json') }}
              restore-keys: ${{ runner.os }}-node16-

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: false

         - name: Deploy
           id: vercel-deploy
           run: |
              if [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
                production="--prod"
              fi

              pnpx vercel -t ${VERCEL_TOKEN} $production > url.txt
           env:
              VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
              VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

         - name: Archive preview url
           uses: actions/upload-artifact@v2
           with:
              name: preview-url
              path: url.txt

   e2e-testing:
      needs: [deploy, prepare]
      runs-on: ubuntu-latest
      env:
         GCP_CLOUD_RUN_SERVICE: e2e-playwright-reports
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "16.13.0"

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Install operating system dependencies
           run: pnpm playwright -- install-deps

         - name: Install browsers
           run: pnpm playwright -- install

         - name: Download preview url
           uses: actions/download-artifact@v2
           with:
              name: preview-url

         - name: Run tests
           run: |
              PLAYWRIGHT_BASE_URL=$(cat url.txt) pnpm playwright -- test --config=.github/config/ci/playwright.config.ts

         - name: Archive coverage results
           uses: actions/upload-artifact@v2
           with:
              name: e2e-testing-report
              path: dist/tests/e2e/reports/ci

         - name: Setup GCP SDK
           uses: google-github-actions/setup-gcloud@master
           with:
              project_id: ${{ env.GCP_PROJECT_ID }}
              service_account_key: ${{ secrets.GCP_SA_KEY }}
              export_default_credentials: true

         - name: Authorize Docker push
           run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

         - name: Build Container
           run: |
              docker build -f .github/images/playwright-report/Dockerfile -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }} .

         - name: Push Container
           run: |
              docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}

         - name: Deploy to Cloud Run
           if: ${{ github.head_ref == 'main' }}
           uses: google-github-actions/deploy-cloudrun@main
           with:
              service: ${{ env.GCP_CLOUD_RUN_SERVICE }}
              image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}
              region: ${{ env.GCP_REGION }}
              flags: --max-instances=2 --port=9323 --allow-unauthenticated --concurrency=20

         - name: Deploy to Cloud Run from release/**
           if: ${{ contains(github.head_ref, 'release') }}
           uses: google-github-actions/deploy-cloudrun@main
           with:
              service: ${{ env.GCP_CLOUD_RUN_SERVICE }}-${{ needs.prepare.outputs.branch }}
              image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}
              region: ${{ env.GCP_REGION }}
              flags: --max-instances=2 --port=3000 --allow-unauthenticated --concurrency=20

         - name: Remove Container from Registry
           run: |
              gcloud artifacts docker images delete ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPOSITORY }}/${{ env.GCP_CLOUD_RUN_SERVICE }}:${{ github.sha }}
