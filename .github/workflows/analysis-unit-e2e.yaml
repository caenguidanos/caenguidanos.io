name: Analysis, Unit Testing & E2E Testing
on:
   pull_request:
      types: [opened, synchronize, reopened]
      branches:
         - main
         - staging
         - development
jobs:
   prepare:
      runs-on: ubuntu-latest
      outputs:
         branch_name: ${{ steps.git_branch.outputs.NAME }}
      steps:
         - name: Print branch name
           if: github.event_name == 'pull_request'
           id: git_branch
           run: echo "::set-env name=NAME::$(echo ${GITHUB_HEAD_REF})"

         - name: Get branch name
           run: echo 'The branch name is' $NAME

   lint:
      runs-on: ubuntu-latest
      needs: [prepare]
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "14.18.1"

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Build app
           run: pnpm build

         - name: Run lint
           run: pnpm lint

   analysis:
      runs-on: ubuntu-latest
      needs: [prepare]
      steps:
         - uses: actions/checkout@v2
           with:
              fetch-depth: 0
         - name: Scan
           uses: SonarSource/sonarcloud-github-action@master
           env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

   unit-testing:
      needs: [analysis, lint]
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "14.18.1"

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Run tests
           run: pnpm test -- --coverage

         - name: Archive code coverage results
           uses: actions/upload-artifact@v2
           with:
              name: unit-test-report
              path: dist/tests/unit/reports

   deploy:
      needs: [unit-testing]
      runs-on: ubuntu-latest
      outputs:
         preview_url: ${{ steps.deployment.outputs.URL }}
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "14.18.1"

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Install Vercel CLI
           run: pnpm i -g vercel

         - name: Deploy
           if:  ${{ needs.prepare.outputs.branch_name == "development" }}
           run: |
              VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }}
              VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}

              vercel -C -S ${{ secrets.VERCEL_SCOPE }} -t ${{ secrets.VERCEL_TOKEN }} > _.txt

         - name: Deploy staging
           if:  ${{ needs.prepare.outputs.branch_name == "staging" }}
           run: |
              VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }}
              VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}

              vercel -C -S ${{ secrets.VERCEL_SCOPE }} -t ${{ secrets.VERCEL_TOKEN }} > _.txt

         - name: Deploy production
           if:  ${{ needs.prepare.outputs.branch_name == "main" }}
           run: |
              VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }}
              VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}

              vercel -C --prod -S ${{ secrets.VERCEL_SCOPE }} -t ${{ secrets.VERCEL_TOKEN }} > _.txt

         - uses: actions/github-script@v5
           id: read-stdout
           with:
             result-encoding: string
             script: |
               const { readFileSync } = require('fs');
               const { join } = require('path');

               const root = process.cwd();
               const file = join(root, '_.txt');

               const content = readFileSync(file, 'utf-8');

               console.log(JSON.stringify({ context, github, content }, undefined, 3));

               return "https://caenguidanos-io.vercel.app";

         - name: Get preview url
           id: deployment
           run: echo "::set-output name=URL::${{ steps.read-stdout.outputs.result }}"

   e2e-testing:
      needs: [deploy]
      runs-on: ubuntu-latest
      env:
         GITHUB_CI: true
      steps:
         - uses: actions/checkout@v2

         - uses: actions/setup-node@v2
           with:
              node-version: "14.18.1"

         - uses: pnpm/action-setup@v2.0.1
           with:
              version: 6.22.2
              run_install: true

         - name: Install operating system dependencies
           run: pnpx playwright install-deps webkit chrome firefox

         - name: Install browsers
           run: pnpx playwright install webkit chrome firefox

         - name: Build app
           run: pnpm build

         - name: Run tests
           run: pnpm playwright -- test --config=e2e/config/ci/playwright.config.ts
           env:
              PLAYWRIGHT_BASE_URL: ${{ needs.deploy.outputs.preview_url }}

         - name: Archive code coverage results
           uses: actions/upload-artifact@v2
           with:
              name: e2e-test-report
              path: dist/tests/e2e/reports
